1.网页当中，返回上一个页面，并且请求服务其刷新，使用location.href = document.referrer

2.update table1 left join table2 不会造成死锁，而update table1  where id in (select table1 left table2),会死锁

3.Spring 的依赖注入（注解方式）可以“继承”，即注入到父类的实例，其相应子类也可以“得到”。

4.元素为数字的json二维数组正则表达式（java）：String reg="\\[(\\[([0-9]+,)*[0-9]+\\],)+\\[([0-9]+,)*[0-9]+\\]\\]";样例：String str="[[309],[25330,27132],[26495,5831,6229],[6783,7068,6271]]";

五.数据库4中事务隔离级别：
1.Read Uncommitted,读取未提交的，会造成赃读（另一个事务修改数据后，当前事务读取，另一个事务最后回滚了修改操作，这就造成赃读）
2.Read committed,读取提交的数据，避免赃读（因为当前事务总是读取了已经提交了的数据），但是还是会造成――有可能每次读取的数据不一样（别的事务提交了新的数据再读时），
	称为不可重复
	Read committed 会给“当前读”上X锁，其他事务在当前事务提交前不能再做任何改变。
		
3.Repeatable Read，可重复读，不允许幻读，每次读取的数据是一样的，原因是Repetable Read 事务隔离级别会给“当前读”加X锁（包含gap锁），这样就锁定了记录前的间隙，
	保证其他事务不能在那个“间隙”插入。、
4.Serializable


5.表级意向锁是为了方便检测表锁与行锁之间的冲突，当事务1需要操作整张表而锁定了整张表，而事务2想操作一行记录，想获得那一行记录的锁，就要等待。引入了意向锁之后，当事务2想要获得
  某一行记录的锁，就先获得表级意向锁，进而获得行锁，当事务3如果想要操作整张表，那么因为事务2已经加了表级意向锁，所以会等待；如果事务3只是想操作某一行，就先加上表级意向锁
  （不会与事务2的表级意向锁冲突），再加上行锁时检测与事务2是否冲突
  
  
6.在线聊天室：netty ，发私信，关注channel（好像每一个channel代表一个用户），html上，onopen时，以“某种特定格式”发送用户，跑到后台，后台解析到“这种特定”格式，识别到是用户添加进来了，就把这个用户放在用户池中

7.web前端：苹果safari浏览器不能兼容的时间格式：yyyy-MM-dd HH:mm:ss.sss,必须转为ISO 8601标准时间格式。也就是说只能new Date("yyyy-MM-DDTHH:mm:ss.ssZ");,
而不能new Date（"yyyy-MM-DD HH:mm:ss.sss"）;此外，苹果safari如果只精确到“日”，那么时间格式必须是：yyyy/MM/dd ，即只能 new Date("yyyy/MM/dd");，而不能
new Date（"yyyy-MM-dd"）；（注：ECMAScript为基于ISO 8601扩展格式的日期时间定义了一个字符串交换格式。格式为YYYY-MM-DDTHH:mm:ss.sssZ）

8.web前端引入的css文件，后引入的“样式”如果与前引入的“样式”重复，那么后引入的将覆盖前引入的


9.关于Spring的，实现ApplicationListener<ContextRereshed>的bean，在Context初始化完毕后，会执行bean里面的onApplicationEvent(ContextRefreshedEvent event) 
方法

10 Http缓存：（1）如果是用浏览器直接刷新或是第一次请求，那么一定会从服务器拉取资源，如果成功获得资源，那么会返回200状态码；（2）缓存：第一次请求时，服务器会返回LAST-MODIFIED
响应头；第二次请求时，浏览器携带IF-MODIFIED-SINCE请求头，其值为上一次响应头中的LAST-MODIFED请求的值

11. mysql――等于null:ISNULL(字段)，不等于null：字段 IS NOT NULL

12.jquery ajax变同步：
$.ajax({
			url:"lxy/car/isCarTimeOut",
			async:false,//关键在这里
			type:"post",
			success:function(res){
				isCarTimeOut=res.status
			},
			dataType:"json",
		});
		
13. include动作和include指令的区别：
（1）执行阶段不同：include指令在编译阶段执行；include动作在请求处理阶段执行
（2）引入内容不同：include指令引入静态文件，在jsp和转化成servlet之前和它融合到一起；include动作引入执行页面和应答文本

14.try catch finally：（1）.不管怎样，总会执行finally块；（2）.返回值会保存在栈中的一个位置，最终返回值是finall块的返回值，中间会不断赋值给那个返回值


15.局部

********************************************多线程***********************************************************
1.Thread 的isAlive()方法含义：返回true表示该线程的run()方法还没有执行完毕（run还是活的），返回false表示该线程的run方法执行结束（run已经死了）

*****************************************cookie 与 session 的重新认识*****************************


1.相同点：
a.两者的始发点都是服务器――都是服务器先发给浏览器，浏览器再对其进行保存。当浏览器再次访问服务器时，都是携带cookie（只不过当中有一个cookie存的是sessionI）

2.不同点：
a.cookie的内容保存在浏览器，session的内容保存在服务器（注：浏览器中有一个cookie保存得有sessionId-sessionId_value）
b.由于session是保存在服务器的，因此它保存的内容可以是Object；而cookie只能存字符串（注：当中有一个cookie存的是sessionId）


3.联系：
a.当浏览器访问服务器时，服务器与浏览器之间的session机制的正常运行，是通过服务器为刚刚创建好的session对象创建sessionId，并将此sessionId以“cookie”形式发送给浏览器 来保证的。也就是说浏览器保存的还是cookie，只不过这个cookie的键值对是seesionId 作为key,sessionId 的值作为value

4.当浏览器的cookie被禁用时，Servlet API 提供了一种方式来保证session机制的正常运行，那就是URL重写技术。
a.URL重写技术：String url = response.encodeURL("请求资源");

********************UML*****************
1.用例图：主要用来描述 用户、需求、系统功能单元之间的关系。它展示了一个外部用户能够观察到的系统功能模型图。帮助开发团队以一种可视化的方式理解系统的功能需求
2.


http://www.jczhijia.com/CourseChaptersList/1038.html

15.为什么private和protected不能修饰外部类
大家都知道类的成员变量和方法可以使用private和protected修饰。
使用private修饰，表示该类的成员只能在类的内部访问。
使用protected修饰，表示该类的成员可以被类的内部、同包下的其它类以及该类的子类访问。
从组织结构来分析：
类的成员（包过变量、方法、内部类等）的上层结构是类，而类的上层结构是包。
如果类可以使用private来修饰，表示该包下的这个类不能被其它类访问，那么该类也失去了存在的意义，所以不能使用private来修饰类。
如果类可以使用protected来修饰，表示该类所在的包的其它类可以访问该类；该类所在的包的子包的类可以访问该类，但是包没有继承的概念，所以后一句是不对。所以用protected来修饰类也是没有意义的。
综上，类只有public和default修饰。
**********************一团队，或者说一个项目组*****************************	
1.代码一定要有规范,规范方案举例如下：
a.(这一项的前提是大家都基本了解需求，了解当前项目是要做一个什么东西)项目经理或主程先写好数据库设计文档，包括表结构及字段命名，然后定一种由数据表字段的命名转化为java代码命名的规则，以后组里每个人都按照这个规则写
b.